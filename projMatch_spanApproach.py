import numpy as np
from sentence_transformers import SentenceTransformer, util
import os
from openai import OpenAI

model = SentenceTransformer('all-mpnet-base-v2')

tools = ["""Post-processing of Large Language Models:
    Project with IBM under the Global Remote Mentorship
    BACKEND DEVELOPER AND ML RESEARCHER
    - Came up with a pipeline for the detection and mitigation of hate speech, bias, violence etc in the responses generated by Large Language Models such as Flan-T5, GPT-2 etc.
    - Developed a user interface where we can display the responses generated by different large language models and their corresponding post-processed responses. We used ReactJS for the user interface and django rest framework to build the Rest APIs for the detectors.""",
    """Multi Model Data Analysis for Annotation of Human Activities:
    -Developed a pipeline which can predict human activities based on continuous analysis of data provided by accelerometer and gyroscope present in a smartwatch.""",
    """Cloudphysician's Vital Extraction Challenge:
    Mid-prep problem statement in Inter-IIT Techmeet 11.0
    - Fine-tuned DETR model to identify the relevant areas from the image that contained the values of the vitals.
    - Fine-tuned PARSEQ for scene text recognition of the extracted boxes containing the values of the vitals.""",
    """Literature Society IITJ Website:
    A website developed for managing various activities for literature society of IIT Jodhpur"""]

A = []
query = "Development and upgrading of the functionality in the existing calendar system in application of loioz.\n<App system>\nLike CRM for advocates in Japan to maintain their schedule, case, legal proceeding, invoicing, remuneration management, chatting etc...\n<Development environment>\n・Windows\n・Spring Tool Suite(STS)\n・Docker（Built within the development PC）\n　-DB（DB environment used by the application）\n　-minIO（AWS S3 environment used by the application）\n<Operational (staging) environment>\n・With AWS\n　-EC2\n　Linux(CentOS)\n　-RDS\n　-S3（Used by company's file function (as own storage)）\n<External linkage>\n・Payment services（Robot Paint）\n・Box\n・DropBox\n・Google Drive\n<Other Tool>\n・Source control：GitLab\n・Project management：Asana\n・Communication tool：Google Chat"

client = OpenAI()
client.api_key = os.getenv("OPENAI_API_KEY")
# response = client.embeddings.create(input = [skill], model="text-embedding-ada-002").data[0].embedding

A.append((np.expand_dims((np.array(client.embeddings.create(input = [query], model="text-embedding-ada-002").data[0].embedding)).astype(np.float32), axis=0))[0])
for tool in tools:
  embed = (np.expand_dims((np.array(client.embeddings.create(input = [tool], model="text-embedding-ada-002").data[0].embedding)).astype(np.float32), axis=0))[0]
  A.append(embed)
A = np.vstack(A).T

# Perform SVD
U, Sigma, Vt = np.linalg.svd(A, full_matrices=True)

# Find the rank of A
rank_A = np.linalg.matrix_rank(A)

# Extract the columns of U corresponding to non-zero singular values
span_vectors = U[:, :rank_A]

# Compute the projection of v onto the span of the vectors in A
projection_A = span_vectors @ span_vectors.T @ A

def compute_embed_similarity(query_embedding, tool_embedding):
    similarity_score = util.pytorch_cos_sim(query_embedding, tool_embedding)
    return similarity_score.item()

tools_embed = projection_A.T[1:]
query = "Development and upgrading of the functionality in the existing calendar system in application of loioz.\n<App system>\nLike CRM for advocates in Japan to maintain their schedule, case, legal proceeding, invoicing, remuneration management, chatting etc...\n<Development environment>\n・Windows\n・Spring Tool Suite(STS)\n・Docker（Built within the development PC）\n　-DB（DB environment used by the application）\n　-minIO（AWS S3 environment used by the application）\n<Operational (staging) environment>\n・With AWS\n　-EC2\n　Linux(CentOS)\n　-RDS\n　-S3（Used by company's file function (as own storage)）\n<External linkage>\n・Payment services（Robot Paint）\n・Box\n・DropBox\n・Google Drive\n<Other Tool>\n・Source control：GitLab\n・Project management：Asana\n・Communication tool：Google Chat"
query_embed = (np.expand_dims((np.array(client.embeddings.create(input = [query], model="text-embedding-ada-002").data[0].embedding)).astype(np.float32), axis=0))

query_embed_span =  (span_vectors @ span_vectors.T @ query_embed.T)

for i, tool_embed in enumerate(tools_embed):
   print(compute_embed_similarity(query_embed_span.T, tool_embed))
